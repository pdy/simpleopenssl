#define SO_API static inline
SO_API auto make_unique(T *ptr) -> std::unique_ptr<T, D>
SO_API void init();
SO_API void cleanUp();
  SO_API Result<std::string> convertObjToStr(const ASN1_OBJECT &obj, Form form = Form::NAME);
  SO_API Result<ASN1_TIME_uptr> convertToAsn1Time(std::time_t time);
  SO_API Result<std::time_t> convertToStdTime(const ASN1_TIME &asn1Time);
  SO_API Result<std::string> convertToISO8601(const ASN1_TIME &asnTime);
  SO_API Result<ASN1_INTEGER_uptr> encodeInteger(const Bytes &bt);
  SO_API Result<ASN1_OBJECT_uptr> encodeObject(const std::string &nameOrNumerical);
  SO_API Result<ASN1_OCTET_STRING_uptr> encodeOctet(const Bytes &bt);
  SO_API Result<ASN1_OCTET_STRING_uptr> encodeOctet(const std::string &str); 
  SO_API BIGNUM_uptr create();
  SO_API Result<BIGNUM_uptr> convertToBignum(const Bytes &bt);
  SO_API Result<Bytes> convertToBytes(const BIGNUM &bn);
  SO_API Result<size_t> getByteLen(const BIGNUM &bn);
  SO_API EC_KEY_uptr create();
  SO_API Result<EC_KEY_uptr> create(Curve curve);
  SO_API Result<EC_KEY_uptr> convertPemToPrivKey(const std::string &pemPriv);
  SO_API Result<EC_KEY_uptr> convertPemToPubKey(const std::string &pemPub);
  SO_API Result<std::string> convertPrivKeyToPem(EC_KEY &ec);
  SO_API Result<std::string> convertPubKeyToPem(EC_KEY &ec);
  SO_API Result<EC_KEY_uptr> convertDerToPrivKey(const Bytes &der);
  SO_API Result<EC_KEY_uptr> convertDerToPubKey(const Bytes &der);
  SO_API Result<Bytes> convertPrivKeyToDer(EC_KEY &ec);
  SO_API Result<Bytes> convertPubKeyToDer(EC_KEY &ec);
  SO_API Result<Bytes> convertToDer(const Signature &signature); 
  SO_API Result<EVP_PKEY_uptr> convertToEvp(const EC_KEY &key);
  SO_API Result<Signature> convertToSignature(const Bytes &derSigBytes);
  SO_API Result<std::string> convertCurveToString(Curve curve);
  SO_API Result<bool> checkKey(const EC_KEY &ecKey);
  SO_API Result<EC_KEY_uptr> copyKey(const EC_KEY &ecKey);
  SO_API Result<Curve> getCurve(const EC_KEY &key);
  SO_API Result<EC_KEY_uptr> getPublic(const EC_KEY &key);
  SO_API Result<size_t> getKeySize(const EC_KEY &key);
  SO_API Result<Bytes> signSha1(const Bytes &message, EC_KEY &key);
  SO_API Result<Bytes> signSha224(const Bytes &message, EC_KEY &key);
  SO_API Result<Bytes> signSha256(const Bytes &message, EC_KEY &key);
  SO_API Result<Bytes> signSha384(const Bytes &message, EC_KEY &key);
  SO_API Result<Bytes> signSha512(const Bytes &message, EC_KEY &key);
  SO_API Result<bool> verifySha1Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey);
  SO_API Result<bool> verifySha224Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey);
  SO_API Result<bool> verifySha256Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey);
  SO_API Result<bool> verifySha384Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey);
  SO_API Result<bool> verifySha512Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey);
  SO_API Result<EVP_PKEY_uptr> convertPemToPrivKey(const std::string &pemPriv);
  SO_API Result<EVP_PKEY_uptr> convertPemToPubKey(const std::string &pemPub);
  SO_API Result<EVP_PKEY_uptr> convertDerToPrivKey(const Bytes &der);
  SO_API Result<EVP_PKEY_uptr> convertDerToPubKey(const Bytes &der);
  SO_API Result<Bytes> convertPrivKeyToDer(EVP_PKEY &privKey);
  SO_API Result<Bytes> convertPubKeyToDer(EVP_PKEY &pubKey);
  SO_API std::string convertPubkeyTypeToString(KeyType pubKeyType);
  SO_API Result<EC_KEY_uptr> convertToEcdsa(EVP_PKEY &key);
  SO_API Result<RSA_uptr> convertToRsa(EVP_PKEY &key);
  SO_API KeyType getKeyType(const EVP_PKEY &pubkey);
  SO_API Result<Bytes> signSha1(const Bytes &message, EVP_PKEY &privateKey);
  SO_API Result<Bytes> signSha224(const Bytes &msg, EVP_PKEY &privKey);
  SO_API Result<Bytes> signSha256(const Bytes &msg, EVP_PKEY &privKey);
  SO_API Result<Bytes> signSha384(const Bytes &msg, EVP_PKEY &privKey);
  SO_API Result<Bytes> signSha512(const Bytes &msg, EVP_PKEY &privKey);
  SO_API Result<bool> verifySha1Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey);
  SO_API Result<bool> verifySha224Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey);
  SO_API Result<bool> verifySha256Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey);
  SO_API Result<bool> verifySha384Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey);
  SO_API Result<bool> verifySha512Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey);
  SO_API Result<Bytes> md4(const Bytes &data);
  SO_API Result<Bytes> md4(const std::string &str);
  SO_API Result<Bytes> md5(const Bytes &data);
  SO_API Result<Bytes> md5(const std::string &str);
  SO_API Result<Bytes> sha1(const Bytes &data);
  SO_API Result<Bytes> sha1(const std::string &str);
  SO_API Result<Bytes> sha224(const Bytes &data);
  SO_API Result<Bytes> sha224(const std::string &str);
  SO_API Result<Bytes> sha256(const Bytes &data);
  SO_API Result<Bytes> sha256(const std::string &str);
  SO_API Result<Bytes> sha384(const Bytes &data);
  SO_API Result<Bytes> sha384(const std::string &str);
  SO_API Result<Bytes> sha512(const Bytes &data);
  SO_API Result<Bytes> sha512(const std::string &str);
  SO_API Result<Bytes> fileMD4(const std::string &path);
  SO_API Result<Bytes> fileMD5(const std::string &path);
  SO_API Result<Bytes> fileSHA1(const std::string &path);
  SO_API Result<Bytes> fileSHA224(const std::string &path);
  SO_API Result<Bytes> fileSHA256(const std::string &path);
  SO_API Result<Bytes> fileSHA384(const std::string &path);
  SO_API Result<Bytes> fileSHA512(const std::string &path);
  SO_API Result<ASN1_OBJECT_uptr> convertToObject(Nid nid);
  SO_API Result<ASN1_OBJECT_uptr> convertToObject(int rawNid);
  SO_API Result<std::string> getLongName(Nid nid);
  SO_API Result<std::string> getLongName(int rawNid);
  SO_API Result<std::string> getShortName(Nid nid);
  SO_API Result<std::string> getShortName(int rawNid);
  SO_API Result<Bytes> bytes(unsigned short numOfBytes);
  SO_API RSA_uptr create(); 
  SO_API Result<RSA_uptr> create(KeyBits keySize, Exponent exponent = Exponent::_65537_);
  SO_API Result<RSA_uptr> convertPemToPrivKey(const std::string &pemPriv);
  SO_API Result<RSA_uptr> convertPemToPubKey(const std::string &pemPub);
  SO_API Result<std::string> convertPrivKeyToPem(RSA &rsa);
  SO_API Result<std::string> convertPubKeyToPem(RSA &rsa);
  SO_API Result<RSA_uptr> convertDerToPrivKey(const Bytes &der);
  SO_API Result<RSA_uptr> convertDerToPubKey(const Bytes &der);
  SO_API Result<Bytes> convertPrivKeyToDer(RSA &rsa);
  SO_API Result<Bytes> convertPubKeyToDer(RSA &rsa);
  SO_API Result<EVP_PKEY_uptr> convertToEvp(RSA &rsa);
  SO_API Result<bool> checkKey(RSA &rsa);
  SO_API Result<KeyBits> getKeyBits(RSA &rsa);
  SO_API Result<RSA_uptr> getPublic(RSA &rsa);
  SO_API Result<Bytes> signSha1(const Bytes &message, RSA &privateKey);
  SO_API Result<Bytes> signSha224(const Bytes &msg, RSA &privKey);
  SO_API Result<Bytes> signSha256(const Bytes &msg, RSA &privKey);
  SO_API Result<Bytes> signSha384(const Bytes &msg, RSA &privKey);
  SO_API Result<Bytes> signSha512(const Bytes &msg, RSA &privKey);
  SO_API Result<bool> verifySha1Signature(const Bytes &signature, const Bytes &message, RSA &pubKey);
  SO_API Result<bool> verifySha224Signature(const Bytes &signature, const Bytes &message, RSA &pubKey);
  SO_API Result<bool> verifySha256Signature(const Bytes &signature, const Bytes &message, RSA &pubKey);
  SO_API Result<bool> verifySha384Signature(const Bytes &signature, const Bytes &message, RSA &pubKey);
  SO_API Result<bool> verifySha512Signature(const Bytes &signature, const Bytes &message, RSA &pubKey);
  SO_API X509_uptr create();
  SO_API Result<X509_uptr> convertPemToX509(const std::string &pemCert);
  SO_API Result<std::string> convertX509ToPem(X509 &cert);
  SO_API Result<X509_uptr> convertPemFileToX509(const std::string &pemFilePath);
  SO_API Result<ecdsa::Signature> getEcdsaSignature(const X509 &cert);
  SO_API Result<CertExtension> getExtension(const X509 &cert, CertExtensionId getExtensionId);
  SO_API Result<CertExtension> getExtension(const X509 &cert, const std::string &oidNumerical);
  SO_API Result<std::vector<CertExtension>> getExtensions(const X509 &cert);
  SO_API Result<size_t> getExtensionsCount(const X509 &cert);
  SO_API Result<Issuer> getIssuer(const X509 &cert);
  SO_API Result<std::string> getIssuerString(const X509 &cert); 
  SO_API Result<EVP_PKEY_uptr> getPubKey(X509 &cert);
  SO_API nid::Nid getPubKeyAlgorithm(X509 &cert);
  SO_API Result<Bytes> getSerialNumber(X509 &cert);
  SO_API Result<Bytes> getSignature(const X509 &cert);
  SO_API nid::Nid getSignatureAlgorithm(const X509 &cert);
  SO_API Result<Subject> getSubject(const X509 &cert);
  SO_API Result<std::string> getSubjectString(const X509 &cert);
  SO_API Result<Validity> getValidity(const X509 &cert);
  SO_API std::tuple<Version,long> getVersion(const X509 &cert);
  SO_API bool isCa(X509 &cert);
  SO_API bool isSelfSigned(X509 &cert);
  SO_API Result<void> setCustomExtension(X509 &cert, const std::string &oidNumerical, ASN1_OCTET_STRING &octet, bool critical = false);
  SO_API Result<void> setExtension(X509 &cert, CertExtensionId id, ASN1_OCTET_STRING &octet, bool critical = false);
  SO_API Result<void> setExtension(X509 &cert, const CertExtension &extension); 
  SO_API Result<void> setIssuer(X509 &cert, const X509 &rootCert);
  SO_API Result<void> setIssuer(X509 &cert, const Issuer &issuer);
  SO_API Result<void> setPubKey(X509 &cert, EVP_PKEY &pkey);
  SO_API Result<void> setSerial(X509 &cert, const Bytes &bytes);
  SO_API Result<void> setSubject(X509 &cert, const Subject &subject);
  SO_API Result<void> setValidity(X509 &cert, const Validity &validity);
  SO_API Result<void> setVersion(X509 &cert, Version version);
  SO_API Result<void> setVersion(X509 &cert, long version);
  SO_API Result<size_t> signSha1(X509 &cert, EVP_PKEY &pkey);
  SO_API Result<size_t> signSha256(X509 &cert, EVP_PKEY &pkey);
  SO_API Result<size_t> signSha384(X509 &cert, EVP_PKEY &pkey); 
  SO_API Result<size_t> signSha512(X509 &cert, EVP_PKEY &pkey);  
  SO_API Result<bool> verifySignature(X509 &cert, EVP_PKEY &pkey);
  SO_API X509_CRL_uptr createCrl();
  SO_API Result<X509_CRL_uptr> convertPemToCRL(const std::string &pemCrl);
  SO_API Result<std::string> convertCrlToPem(X509_CRL &crl);
  SO_API Result<ecdsa::Signature> getEcdsaSignature(X509_CRL &crl);
  SO_API Result<std::vector<CrlExtension>> getExtensions(X509_CRL &crl);
  SO_API Result<size_t> getExtensionsCount(X509_CRL &crl);
  SO_API Result<Issuer> getIssuer(X509_CRL &crl);
  SO_API Result<std::string> getIssuerString(X509_CRL &crl);
  SO_API size_t getRevokedCount(X509_CRL &crl);
  SO_API Result<std::vector<Revoked>> getRevoked(X509_CRL &crl);
  SO_API Result<Bytes> getSignature(const X509_CRL &crl);
  SO_API nid::Nid getSignatureAlgorithm(const X509_CRL &crl);
  SO_API std::tuple<Version, long> getVersion(X509_CRL &crl);
SO_API void init()
SO_API void cleanUp()
  SO_API Result<std::string> convertObjToStr(const ASN1_OBJECT &obj, Form form)
  SO_API Result<ASN1_TIME_uptr> convertToAsn1Time(std::time_t time)
  SO_API Result<std::time_t> convertToStdTime(const ASN1_TIME &asn1Time)
  SO_API Result<std::string> convertToISO8601(const ASN1_TIME &asnTime)
  SO_API Result<ASN1_INTEGER_uptr> encodeInteger(const Bytes &bt)
  SO_API Result<ASN1_OBJECT_uptr> encodeObject(const std::string &nameOrNumerical)
  SO_API Result<ASN1_OCTET_STRING_uptr> encodeOctet(const Bytes &bt)
  SO_API Result<ASN1_OCTET_STRING_uptr> encodeOctet(const std::string &str)
  SO_API BIGNUM_uptr create()
  SO_API Result<Bytes> convertToBytes(const BIGNUM &bn)
  SO_API Result<BIGNUM_uptr> convertToBignum(const Bytes &bt)
  SO_API Result<size_t> getByteLen(const BIGNUM &bn)
  SO_API Result<EC_KEY_uptr> convertPemToPubKey(const std::string &pemPub)
  SO_API Result<EC_KEY_uptr> convertPemToPrivKey(const std::string &pemPriv)
  SO_API Result<std::string> convertPrivKeyToPem(EC_KEY &ec)
  SO_API Result<std::string> convertPubKeyToPem(EC_KEY &pubKey)
  SO_API Result<EC_KEY_uptr> convertDerToPrivKey(const Bytes &der)
  SO_API Result<EC_KEY_uptr> convertDerToPubKey(const Bytes &der)
  SO_API Result<Bytes> convertPrivKeyToDer(EC_KEY &ec)
  SO_API Result<Bytes> convertPubKeyToDer(EC_KEY &ec)
  SO_API Result<bool> checkKey(const EC_KEY &ecKey)
  SO_API Result<EC_KEY_uptr> copyKey(const EC_KEY &ecKey)
  SO_API Result<Curve> getCurve(const EC_KEY &key)
  SO_API Result<Bytes> convertToDer(const Signature &signature)
  SO_API Result<Signature> convertToSignature(const Bytes &derSigBytes)
  SO_API Result<std::string> convertCurveToString(Curve curve)
  SO_API Result<EC_KEY_uptr> getPublic(const EC_KEY &key)
  SO_API Result<size_t> getKeySize(const EC_KEY &key)
  SO_API Result<EVP_PKEY_uptr> convertToEvp(const EC_KEY &ecKey)
  SO_API EC_KEY_uptr create()
  SO_API Result<EC_KEY_uptr> create(Curve curve)
  SO_API Result<Bytes> signSha1(const Bytes &message, EC_KEY &key)
  SO_API Result<Bytes> signSha224(const Bytes &message, EC_KEY &key)
  SO_API Result<Bytes> signSha256(const Bytes &message, EC_KEY &key)
  SO_API Result<Bytes> signSha384(const Bytes &message, EC_KEY &key)
  SO_API Result<Bytes> signSha512(const Bytes &message, EC_KEY &key)
  SO_API Result<bool> verifySha1Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey)
  SO_API Result<bool> verifySha224Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey)
  SO_API Result<bool> verifySha256Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey)
  SO_API Result<bool> verifySha384Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey)
  SO_API Result<bool> verifySha512Signature(const Bytes &signature, const Bytes &message, EC_KEY &publicKey)
  SO_API Result<EVP_PKEY_uptr> convertPemToPubKey(const std::string &pemPub)
  SO_API Result<EVP_PKEY_uptr> convertPemToPrivKey(const std::string &pemPriv)
  SO_API Result<EVP_PKEY_uptr> convertDerToPrivKey(const Bytes &der)
  SO_API Result<EVP_PKEY_uptr> convertDerToPubKey(const Bytes &der)
  SO_API Result<Bytes> convertPrivKeyToDer(EVP_PKEY &privKey)
  SO_API Result<Bytes> convertPubKeyToDer(EVP_PKEY &pkey)
  SO_API std::string convertPubkeyTypeToString(KeyType pubKeyType)
  SO_API Result<EC_KEY_uptr> convertToEcdsa(EVP_PKEY &key)
  SO_API Result<RSA_uptr> convertToRsa(EVP_PKEY &key)
  SO_API KeyType getKeyType(const EVP_PKEY &pubkey)
  SO_API Result<Bytes> signSha1(const Bytes &message, EVP_PKEY &privateKey)
  SO_API Result<Bytes> signSha224(const Bytes &message, EVP_PKEY &privateKey)
  SO_API Result<Bytes> signSha256(const Bytes &message, EVP_PKEY &privateKey)
  SO_API Result<Bytes> signSha384(const Bytes &message, EVP_PKEY &privateKey)
  SO_API Result<Bytes> signSha512(const Bytes &message, EVP_PKEY &privateKey)
  SO_API Result<bool> verifySha1Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey)
  SO_API Result<bool> verifySha224Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey)
  SO_API Result<bool> verifySha256Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey)
  SO_API Result<bool> verifySha384Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey)
  SO_API Result<bool> verifySha512Signature(const Bytes &signature, const Bytes &message, EVP_PKEY &pubKey)
  SO_API Result<Bytes> md4(const Bytes &data)
  SO_API Result<Bytes> md4(const std::string &data)
  SO_API Result<Bytes> md5(const Bytes &data)
  SO_API Result<Bytes> md5(const std::string &data)
  SO_API Result<Bytes> sha1(const Bytes &data)
  SO_API Result<Bytes> sha1(const std::string &data)
  SO_API Result<Bytes> sha224(const Bytes &data)
  SO_API Result<Bytes> sha224(const std::string &data)
  SO_API Result<Bytes> sha256(const Bytes &data)
  SO_API Result<Bytes> sha256(const std::string &data)
  SO_API Result<Bytes> sha384(const Bytes &data)
  SO_API Result<Bytes> sha384(const std::string &data)
  SO_API Result<Bytes> sha512(const Bytes &data)
  SO_API Result<Bytes> sha512(const std::string &data)
  SO_API Result<Bytes> fileMD4(const std::string &path)
  SO_API Result<Bytes> fileMD5(const std::string &path)
  SO_API Result<Bytes> fileSHA1(const std::string &path)
  SO_API Result<Bytes> fileSHA224(const std::string &path)
  SO_API Result<Bytes> fileSHA256(const std::string &path)
  SO_API Result<Bytes> fileSHA384(const std::string &path)
  SO_API Result<Bytes> fileSHA512(const std::string &path)
   SO_API Result<ASN1_OBJECT_uptr> convertToObject(Nid nid)
  SO_API Result<ASN1_OBJECT_uptr> convertToObject(int rawNid)
  SO_API Result<std::string> getLongName(Nid nid)
  SO_API Result<std::string> getLongName(int rawNid)
  SO_API Result<std::string> getShortName(Nid nid)
  SO_API Result<std::string> getShortName(int rawNid)
  SO_API Result<Bytes> bytes(unsigned short numOfBytes)
  SO_API Result<RSA_uptr> convertPemToPubKey(const std::string &pemPub)
  SO_API Result<RSA_uptr> convertPemToPrivKey(const std::string &pemPriv)
  SO_API Result<std::string> convertPrivKeyToPem(RSA &rsa)
  SO_API Result<std::string> convertPubKeyToPem(RSA &pubKey)
  SO_API Result<RSA_uptr> convertDerToPrivKey(const Bytes &der)
  SO_API Result<RSA_uptr> convertDerToPubKey(const Bytes &der)
  SO_API Result<Bytes> convertPrivKeyToDer(RSA &rsa)
  SO_API Result<Bytes> convertPubKeyToDer(RSA &rsa)
  SO_API Result<EVP_PKEY_uptr> convertToEvp(RSA &rsa)
  SO_API Result<bool> checkKey(RSA &rsa)
  SO_API RSA_uptr create()
  SO_API Result<RSA_uptr> create(KeyBits keySize, Exponent exponent)
  SO_API Result<KeyBits> getKeyBits(RSA &rsa)
  SO_API Result<RSA_uptr> getPublic(RSA &rsa)
  SO_API Result<Bytes> signSha1(const Bytes &msg, RSA &privKey)
  SO_API Result<Bytes> signSha224(const Bytes &msg, RSA &privKey)
  SO_API Result<Bytes> signSha256(const Bytes &msg, RSA &privKey)
  SO_API Result<Bytes> signSha384(const Bytes &msg, RSA &privKey)
  SO_API Result<Bytes> signSha512(const Bytes &msg, RSA &privKey)
  SO_API Result<bool> verifySha1Signature(const Bytes &signature, const Bytes &message, RSA &pubKey)
  SO_API Result<bool> verifySha224Signature(const Bytes &signature, const Bytes &message, RSA &pubKey)
  SO_API Result<bool> verifySha256Signature(const Bytes &signature, const Bytes &message, RSA &pubKey)
  SO_API Result<bool> verifySha384Signature(const Bytes &signature, const Bytes &message, RSA &pubKey)
  SO_API Result<bool> verifySha512Signature(const Bytes &signature, const Bytes &message, RSA &pubKey)
  SO_API Result<Issuer> getIssuer(const X509 &cert)
  SO_API Result<std::string> getIssuerString(const X509 &cert)
  SO_API bool isCa(X509 &cert)
  SO_API bool isSelfSigned(X509 &cert)
  SO_API X509_uptr create()
  SO_API Result<X509_uptr> convertPemToX509(const std::string &pemCert)
  SO_API Result<std::string> convertX509ToPem(X509 &cert)
  SO_API Result<X509_uptr> convertPemFileToX509(const std::string &pemFilePath)
  SO_API Result<EVP_PKEY_uptr> getPubKey(X509 &cert)
  SO_API nid::Nid getPubKeyAlgorithm(X509 &cert)
  SO_API Result<Bytes> getSerialNumber(X509 &cert)
  SO_API Result<size_t> signSha1(X509 &cert, EVP_PKEY &pkey)
  SO_API Result<size_t> signSha256(X509 &cert, EVP_PKEY &key)
  SO_API Result<size_t> signSha384(X509 &cert, EVP_PKEY &pkey)
  SO_API Result<size_t> signSha512(X509 &cert, EVP_PKEY &pkey)
  SO_API Result<Bytes> getSignature(const X509 &cert)
  SO_API nid::Nid getSignatureAlgorithm(const X509 &cert)
  SO_API Result<ecdsa::Signature> getEcdsaSignature(const X509 &cert)
  SO_API Result<CertExtension> getExtension(const X509 &cert, CertExtensionId getExtensionId)
  SO_API Result<CertExtension> getExtension(const X509 &cert, const std::string &oidNumerical)
  SO_API Result<std::vector<CertExtension>> getExtensions(const X509 &cert)
  SO_API Result<size_t> getExtensionsCount(const X509 &cert)
  SO_API Result<Subject> getSubject(const X509 &cert)
  SO_API Result<std::string> getSubjectString(const X509 &cert)
  SO_API Result<Validity> getValidity(const X509 &cert)
  SO_API Result<bool> verifySignature(X509 &cert, EVP_PKEY &pkey)
  SO_API std::tuple<Version,long> getVersion(const X509 &cert)
  SO_API Result<void> setCustomExtension(X509 &cert, const std::string &oidNumerical, ASN1_OCTET_STRING &octet, bool critical)
  SO_API Result<void> setExtension(X509 &cert, CertExtensionId id, ASN1_OCTET_STRING &octet, bool critical)
  SO_API Result<void> setExtension(X509 &cert, const CertExtension &extension)
  SO_API Result<void> setIssuer(X509 &cert, const X509 &rootCert)
  SO_API Result<void> setIssuer(X509 &cert, const Issuer &info)
  SO_API Result<void> setPubKey(X509 &cert, EVP_PKEY &pkey)
  SO_API Result<void> setSerial(X509 &cert, const Bytes &bytes)
  SO_API Result<void> setSubject(X509 &cert, const Subject &info)
  SO_API Result<void> setValidity(X509 &cert, const Validity &validity)
  SO_API Result<void> setVersion(X509 &cert, Version version)
  SO_API Result<void> setVersion(X509 &cert, long version)
  SO_API X509_CRL_uptr createCrl()
  SO_API Result<X509_CRL_uptr> convertPemToCRL(const std::string &pemCrl)
  SO_API Result<std::string> convertCrlToPem(X509_CRL &crl)
  SO_API Result<ecdsa::Signature> getEcdsaSignature(X509_CRL &crl)
  SO_API Result<std::vector<CrlExtension>> getExtensions(X509_CRL &crl)
  SO_API Result<size_t> getExtensionsCount(X509_CRL &crl)
  SO_API Result<Issuer> getIssuer(X509_CRL &crl)
  SO_API Result<std::string> getIssuerString(X509_CRL &crl)
  SO_API size_t getRevokedCount(X509_CRL &crl)
  SO_API Result<std::vector<x509::Revoked>> getRevoked(X509_CRL &crl)
  SO_API Result<Bytes> getSignature(const X509_CRL &crl)
  SO_API nid::Nid getSignatureAlgorithm(const X509_CRL &crl)
  SO_API std::tuple<Version, long> getVersion(X509_CRL &crl)
