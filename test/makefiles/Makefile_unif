# SHELL=/bin/bash

print-%  : ; @echo $* = $($*)

CXX := clang++
STRIP := strip

PROJ_ROOT := ..
OPENSSL_PATH := $(PROJ_ROOT)/3rd/openssl_1.1.0f
GTEST_PATH := $(PROJ_ROOT)/3rd/gtest
TEST_PATH := $(PROJ_ROOT)/test/unified

# suppress GTEST warnings
TEST_FLAGS := -Wno-global-constructors -Wno-exit-time-destructors -Wno-missing-prototypes -Wno-weak-vtables \
	-Wno-missing-variable-declarations -Wno-gnu-zero-variadic-macro-arguments

FLAGS := -std=c++11 -Wno-deprecated-register -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded

LD_FLAGS := -L$(GTEST_PATH)/lib -L$(OPENSSL_PATH)/lib

GTEST_LIBS := -lgtest -lgmock -lgmock_main
OPENSSL_LIBS := -lssl -lcrypto

LD_LIBS := -Wl,-Bstatic $(OPENSSL_LIBS) -Wl,-Bdynamic -pthread -ldl

INCLUDES := -I$(PROJ_ROOT)/include/ -isystem$(OPENSSL_PATH)/include -isystem$(GTEST_PATH)/include
ROOT_BUILD := $(PROJ_ROOT)/build

ifeq ($(MAKECMDGOALS),release)
	BUILD = $(ROOT_BUILD)/release
	CXXFLAGS = $(FLAGS) $(INCLUDES) -O3 -Wall
else	
	BUILD = $(ROOT_BUILD)/debug
	CXXFLAGS = $(FLAGS) $(INCLUDES) -g -Weverything
	STRIP = echo
endif

.PHONY: all clean

DESTBIN := $(BUILD)/bin
OBJ_PATH := $(BUILD)/obj/unified

all: unifiedTarget dist $(DESTBIN)/UnitTests copydata strip
debug: all
release: all

unifiedTarget:
	@cd $(TEST_PATH) && ./unifiedfile_sym ../ rest && cd - && \
	cd $(TEST_PATH) && ./unifiedfile_sym ../ecdsa ecdsa && cd - && \
	cd $(TEST_PATH) && ./unifiedfile_sym ../evp evp && cd - && \
	cd $(TEST_PATH) && ./unifiedfile_sym ../hash hash && cd - && \
	cd $(TEST_PATH) && ./unifiedfile_sym ../nid nid && cd - && \
	cd $(TEST_PATH) && ./unifiedfile_sym ../rsa rsa && cd - && \
	cd $(TEST_PATH) && ./unifiedfile_sym ../x509 x509 && cd -
	
dist:
	@mkdir -p $(OBJ_PATH) \
				$(DESTBIN)
	
clean:
	@rm -r $(ROOT_BUILD)

copydata:
	@cp -r $(TEST_PATH)/../data $(DESTBIN)/

strip:
	$(STRIP) $(DESTBIN)/UnitTests

SRC_TEST := $(wildcard $(TEST_PATH)/rest.cpp)
SRC_X509_TEST := $(wildcard $(TEST_PATH)/x509.cpp)
SRC_ECDSA_TEST := $(wildcard $(TEST_PATH)/ecdsa.cpp)
SRC_RSA_TEST := $(wildcard $(TEST_PATH)/rsa.cpp)
SRC_HASH_TEST := $(wildcard $(TEST_PATH)/hash.cpp)
SRC_NID_TEST := $(wildcard $(TEST_PATH)/nid.cpp)
SRC_EVP_TEST := $(wildcard $(TEST_PATH)/evp.cpp)

OBJS_TEST := $(patsubst $(TEST_PATH)/rest.cpp,$(OBJ_PATH)/rest.o, $(SRC_TEST))

OBJS_X509_TEST := $(patsubst $(TEST_PATH)/x509.cpp,$(OBJ_PATH)/x509.o, $(SRC_X509_TEST))

OBJS_ECDSA_TEST := $(patsubst $(TEST_PATH)/ecdsa.cpp,$(OBJ_PATH)/ecdsa.o, $(SRC_ECDSA_TEST))

OBJS_RSA_TEST := $(patsubst $(TEST_PATH)/rsa.cpp,$(OBJ_PATH)/rsa.o, $(SRC_RSA_TEST))

OBJS_HASH_TEST := $(patsubst $(TEST_PATH)/hash.cpp,$(OBJ_PATH)/hash.o, $(SRC_HASH_TEST))

OBJS_NID_TEST := $(patsubst $(TEST_PATH)/nid.cpp,$(OBJ_PATH)/nid.o, $(SRC_NID_TEST))

OBJS_EVP_TEST := $(patsubst $(TEST_PATH)/evp.cpp,$(OBJ_PATH)/evp.o, $(SRC_EVP_TEST))


$(DESTBIN)/UnitTests: $(OBJS_TEST) \
	$(OBJS_X509_TEST) $(OBJS_HASH_TEST) \
	$(OBJS_RSA_TEST) \
	$(OBJS_ECDSA_TEST) \
	$(OBJS_NID_TEST) \
	$(OBJS_EVP_TEST)
	@$(CXX) $(CXXFLAGS) $(TEST_FLAGS) -o $@ $^ $(LD_FLAGS) $(GTEST_LIBS) $(LD_LIBS)
	@echo "$<"

$(OBJ_PATH)/%.o: $(TEST_PATH)/%.cpp
	@$(CXX) $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

