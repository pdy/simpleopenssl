print-%  : ; @echo $* = $($*)

CXX := clang++
STRIP := strip

PROJ_ROOT := ..
OPENSSL_PATH := $(PROJ_ROOT)/3rd/openssl_1.1.0f
GTEST_PATH := $(PROJ_ROOT)/3rd/gtest
TEST_PATH := $(PROJ_ROOT)/test/unified

# suppress GTEST warnings
TEST_FLAGS := -Wno-global-constructors -Wno-exit-time-destructors -Wno-missing-prototypes -Wno-weak-vtables \
	-Wno-missing-variable-declarations -Wno-gnu-zero-variadic-macro-arguments

FLAGS := -std=c++11 -Wno-deprecated-register -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded

LD_FLAGS := -L$(GTEST_PATH)/lib -L$(OPENSSL_PATH)/lib

GTEST_LIBS := -lgtest -lgmock -lgmock_main
OPENSSL_LIBS := -lssl -lcrypto

LD_LIBS := -Wl,-Bstatic $(OPENSSL_LIBS) -Wl,-Bdynamic -pthread -ldl

INCLUDES := -I$(PROJ_ROOT)/include/ -isystem$(OPENSSL_PATH)/include -isystem$(GTEST_PATH)/include
ROOT_BUILD := $(PROJ_ROOT)/build

ifeq ($(MAKECMDGOALS),release)
	BUILD = $(ROOT_BUILD)/release
	CXXFLAGS = $(FLAGS) $(INCLUDES) -O3 -Wall
else	
	BUILD = $(ROOT_BUILD)/debug
	CXXFLAGS = $(FLAGS) $(INCLUDES) -g -Weverything
	STRIP = echo
endif

.PHONY: all clean unifiedTarget 

DESTBIN := $(BUILD)/bin
OBJ_PATH := $(BUILD)/obj/unified

all: post-build 
debug: all
release: all

pre-build: unifiedTarget
	@mkdir -p $(OBJ_PATH) $(DESTBIN) # prepare dist

post-build: main-build
	@cp -r $(TEST_PATH)/../data $(DESTBIN)/ # copydata
	$(STRIP) $(DESTBIN)/UnitTests

main-build: pre-build
	@$(MAKE) --no-print-directory $(DESTBIN)/UnitTests	

unifiedTarget:
	@cd $(TEST_PATH) && \
	./unifiedfile_sym ../ rest &&  \
	./unifiedfile_sym ../ecdsa ecdsa && \
	./unifiedfile_sym ../evp evp && \
	./unifiedfile_sym ../hash hash && \
	./unifiedfile_sym ../rsa rsa && \
	./unifiedfile_sym ../x509 x509 && \
	cd -
	
	
clean:
	@rm -r $(ROOT_BUILD)

SRC_TEST := $(wildcard $(TEST_PATH)/*.cpp)
OBJS_TEST := $(patsubst $(TEST_PATH)/%.cpp,$(OBJ_PATH)/%.o, $(SRC_TEST))

$(DESTBIN)/UnitTests: $(OBJS_TEST)	
	@$(CXX) $(CXXFLAGS) $(TEST_FLAGS) -o $@ $^ $(LD_FLAGS) $(GTEST_LIBS) $(LD_LIBS) 
	@echo "$<"

$(OBJ_PATH)/%.o: $(TEST_PATH)/%.cpp
	@$(CXX) $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^ 
	@echo "$<"

