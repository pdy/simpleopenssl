print-%  : ; @echo $* = $($*)

CXX := clang++

PROJ_ROOT := ..
OPENSSL_PATH := $(PROJ_ROOT)/3rd/openssl
GTEST_PATH := $(PROJ_ROOT)/3rd/gtest
TEST_PATH := $(PROJ_ROOT)/test

# suppress GTEST warnings
TEST_FLAGS := -Wno-global-constructors -Wno-exit-time-destructors -Wno-missing-prototypes -Wno-weak-vtables \
	-Wno-missing-variable-declarations -Wno-gnu-zero-variadic-macro-arguments

FLAGS := -std=c++11 -Wno-deprecated-register -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-padded -Wno-used-but-marked-unused

LD_FLAGS := -L$(GTEST_PATH)/lib -L$(OPENSSL_PATH)/lib

GTEST_LIBS := -lgtest -lgmock_main -lgmock 
OPENSSL_LIBS := -lssl -lcrypto

LD_LIBS := -Wl,-Bstatic $(OPENSSL_LIBS) -Wl,-Bdynamic -pthread -ldl

INCLUDES := -I$(PROJ_ROOT)/include/ -isystem$(OPENSSL_PATH)/include -isystem$(GTEST_PATH)/include
ROOT_BUILD := $(PROJ_ROOT)/build

BUILD = $(ROOT_BUILD)/debug
CXXFLAGS = $(FLAGS) $(INCLUDES) -g -Weverything
STRIP := echo 
ifneq (,$(findstring release,$(MAKECMDGOALS)))
	BUILD = $(ROOT_BUILD)/release
	CXXFLAGS = $(FLAGS) $(INCLUDES) -O3 -Wall
	STRIP = strip 
endif

SRC_TEST := $(wildcard $(TEST_PATH)/*cpp)
SRC_X509_TEST := $(wildcard $(TEST_PATH)/x509/*cpp)
SRC_ECDSA_TEST := $(wildcard $(TEST_PATH)/ecdsa/*cpp)
SRC_RSA_TEST := $(wildcard $(TEST_PATH)/rsa/*cpp)
SRC_HASH_TEST := $(wildcard $(TEST_PATH)/hash/*cpp)
SRC_EVP_TEST := $(wildcard $(TEST_PATH)/evp/*cpp)

OBJ_PATH := $(BUILD)/obj
OBJS_TEST := $(patsubst $(TEST_PATH)/%.cpp,$(OBJ_PATH)/%.o, $(SRC_TEST))

OBJ_X509_PATH := $(OBJ_PATH)/x509
OBJS_X509_TEST := $(patsubst $(TEST_PATH)/x509/%.cpp,$(OBJ_X509_PATH)/%.o, $(SRC_X509_TEST))

OBJ_ECDSA_PATH := $(OBJ_PATH)/ecdsa
OBJS_ECDSA_TEST := $(patsubst $(TEST_PATH)/ecdsa/%.cpp,$(OBJ_ECDSA_PATH)/%.o, $(SRC_ECDSA_TEST))

OBJ_RSA_PATH := $(OBJ_PATH)/rsa
OBJS_RSA_TEST := $(patsubst $(TEST_PATH)/rsa/%.cpp,$(OBJ_RSA_PATH)/%.o, $(SRC_RSA_TEST))

OBJ_HASH_PATH := $(OBJ_PATH)/hash
OBJS_HASH_TEST := $(patsubst $(TEST_PATH)/hash/%.cpp,$(OBJ_HASH_PATH)/%.o, $(SRC_HASH_TEST))

OBJ_EVP_PATH := $(OBJ_PATH)/evp
OBJS_EVP_TEST := $(patsubst $(TEST_PATH)/evp/%.cpp,$(OBJ_EVP_PATH)/%.o, $(SRC_EVP_TEST))

.PHONY: all clean

DESTBIN := $(BUILD)/bin

all: post-build 
debug: all
release: all

pre-build: $(TEST_PATH)/pch.hpp.pch
	@mkdir -p $(OBJ_PATH) \
		$(OBJ_X509_PATH) \
		$(OBJ_HASH_PATH) \
		$(OBJ_RSA_PATH) \
		$(OBJ_ECDSA_PATH) \
		$(OBJ_EVP_PATH) \
		$(DESTBIN)

post-build: main-build
	@cp -r $(TEST_PATH)/data $(DESTBIN)/ # copydata
	$(STRIP) $(DESTBIN)/UnitTests

main-build: pre-build
	$(MAKE) --no-print-directory $(DESTBIN)/UnitTests

$(TEST_PATH)/pch.hpp.pch:
	 @$(CXX) -x c++-header -std=c++11 $(TEST_PATH)/pch.hpp -o $@  $(INCLUDES)
	 @echo "$@"

clean:
	@rm $(TEST_PATH)/pch.hpp.pch
	@rm -r $(ROOT_BUILD)

$(DESTBIN)/UnitTests: $(OBJS_TEST) \
	$(OBJS_X509_TEST) $(OBJS_HASH_TEST) \
	$(OBJS_RSA_TEST) \
	$(OBJS_ECDSA_TEST) \
	$(OBJS_EVP_TEST)
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -o $@ $^ $(LD_FLAGS) $(GTEST_LIBS) $(LD_LIBS)
	@echo "$<"

$(OBJ_PATH)/%.o: $(TEST_PATH)/%.cpp
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

$(OBJ_X509_PATH)/%.o: $(TEST_PATH)/x509/%.cpp
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

$(OBJ_HASH_PATH)/%.o: $(TEST_PATH)/hash/%.cpp
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

$(OBJ_EVP_PATH)/%.o: $(TEST_PATH)/evp/%.cpp
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

(OBJ_RSA_PATH)/%.o: $(TEST_PATH)/rsa/%.cpp
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

$(OBJ_ECDSA_PATH)/%.o: $(TEST_PATH)/ecdsa/%.cpp
	@$(CXX) -include $(TEST_PATH)/pch.hpp $(CXXFLAGS) $(TEST_FLAGS) -c -o $@ $^
	@echo "$<"

