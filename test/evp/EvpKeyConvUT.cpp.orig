/*
* Copyright (c) 2022 Pawel Drzycimski
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*/

#include <algorithm>
#include <numeric>
#include <gtest/gtest.h>
#include <simpleopenssl/simpleopenssl.hpp>

#include "../precalculated.h"
#include "../utils.h"

namespace so { namespace ut { namespace evp {

<<<<<<< HEAD
TEST(EvpKeyConvUT, rsaPubDerToEVP)
=======
//namespace evp = ::so::evp;

TEST(EvpKeyConvUT, DISABLED_rsaPubDerToEVP)
>>>>>>> master
{
  const auto &derPub = data::rsa3072PubKeyDer;

  const uint8_t *it = derPub.get();
  auto evpPub = ::so::make_unique(d2i_PublicKey(EVP_PKEY_RSA, nullptr, &it, static_cast<long>(derPub.size())));

  EXPECT_TRUE(evpPub) << ::so::getLastErrString();
}

}}} // so::ut::evp

